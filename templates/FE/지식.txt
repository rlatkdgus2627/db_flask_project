1. 페이지 바꾸는 법 

<button onclick="location.href='/index2'">Next Page</button>

@app.route('/index2')
def next_page():
    return render_template('index2.html')    

2. 데이터 통신

<button onclick="fetchData()">Fetch Data</button>

async function fetchData() {
            try {
                const response = await fetch('/data'); // 서버에서 JSON 데이터 요청, '/data'에 라우팅 함수가 작동하고, 다시 html로 return함. 즉 front -> back -> front인 셈
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();	// json 받아야죠
                document.getElementById('output').textContent = data.message; // 화면에 데이터 표시
            } 
            catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
                document.getElementById('output').textContent = 'Error fetching data.';
            }
        }

즉 front -> back -> front인 것을 기억하라. fetch 함수는 라우팅 함수의 return값을 받는다. 보통 그 return값은 json형식이다.

return jsonify({"message": "Hello, this is data from the server!"})

const response = await fetch('/login_json', {
  method: 'POST',
  headers: {
  'Content-Type':'application/json'
  },
  body: JSON.stringify(data)

이런 식으로 back에 json을 전달할 수도 있다.
위의 경우는 back에서 데이터만 받아올 때, 아래의 경우는 데이터를 주고 받을 때.

추가로 통신만을 위한 라우팅 함수를 새로 만들어야한다! -> 랜더링하는 라우팅함수는 사용 X